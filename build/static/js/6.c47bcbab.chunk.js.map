{"version":3,"sources":["redux/phonebook/phonebook-operations.js","redux/phonebook/phonebook-selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","components/ContactList/ContactList.container.js","views/PhonebookView.jsx"],"names":["fetchContacts","dispatch","a","fetchContactsRequest","axios","get","response","fetchContactsSuccess","data","fetchContactsError","message","addContact","contact","addContactsRequest","post","addContactsSuccess","addContactsError","deleteContacts","id","deleteContactsRequest","delete","deleteContactsSuccess","deleteContactsError","contactsArray","state","contacts","items","getFilter","filter","getVisibleContacts","createSelector","normalize","toLowerCase","el","name","includes","ContactForm","number","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","newContact","props","reset","find","alert","some","onSubmit","this","className","htmlFor","nameInputId","type","title","placeholder","onChange","required","Component","connect","contactsSelectors","contactsOperations","Filter","changeFilter","target","protoType","PropTypes","string","func","ContactList","onDelete","map","Button","onClick","variant","PhonebookView","length","mapDispatchToProps"],"mappings":"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","file":"static/js/6.c47bcbab.chunk.js","sourcesContent":["import axios from 'axios';\n\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactsRequest,\n  addContactsSuccess,\n  addContactsError,\n  deleteContactsRequest,\n  deleteContactsSuccess,\n  deleteContactsError,\n} from './phonebook-actions';\n\nconst fetchContacts = () => async dispatch => {\n  dispatch(fetchContactsRequest());\n\n  try {\n    const response = await axios.get('/contacts');\n\n    dispatch(fetchContactsSuccess(response.data));\n  } catch (error) {\n    dispatch(fetchContactsError(error.message));\n  }\n};\n\nconst addContact = contact => async dispatch => {\n  dispatch(addContactsRequest());\n\n  try {\n    const response = await axios.post('/contacts', contact);\n    dispatch(addContactsSuccess(response.data));\n  } catch (error) {\n    dispatch(addContactsError(error.message));\n  }\n};\n\nconst deleteContacts = id => async dispatch => {\n  dispatch(deleteContactsRequest());\n\n  try {\n    const response = await axios.delete(`/contacts/${id}`);\n    dispatch(deleteContactsSuccess(id));\n  } catch (error) {\n    dispatch(deleteContactsError(error.message));\n  }\n};\n\nexport default { fetchContacts, addContact, deleteContacts };\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst contactsArray = state => state.contacts.items;\nconst getFilter = state => state.contacts.filter;\n\n// мемоізація //\nconst getVisibleContacts = createSelector(\n  [contactsArray, getFilter],\n  (contacts, filter) => {\n    const normalize = filter.toLowerCase();\n    return contacts.filter(el => el.name.toLowerCase().includes(normalize));\n  },\n);\n\nexport default {\n  contactsArray,\n  getFilter,\n  getVisibleContacts,\n};\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\n// import { v4 as uuidv4 } from 'uuid';\n\nimport { connect } from 'react-redux';\nimport { contactsOperations } from '../../redux/phonebook';\nimport { contactsSelectors } from '../../redux/phonebook';\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n    message: '',\n  };\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const { contacts } = this.props;\n    const { name, number, message } = this.state;\n    let newContact;\n    this.reset();\n    if (contacts.find(el => el.name.toLowerCase() === name.toLowerCase())) {\n      return alert(`${name} is already in contacts`);\n    } else if (contacts.some(el => el.number === number)) {\n      return alert(`Number ${number} is already in contacts`);\n    } else {\n      newContact = {\n        name: name,\n        number: number,\n        message: message,\n      };\n    }\n    return this.props.onSubmit(newContact);\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '', message: '' });\n  };\n\n  render() {\n    const { name, number, message } = this.state;\n\n    return (\n      <div className=\"phonebook\">\n        <form onSubmit={this.handleSubmit} className=\"phonebook-form\">\n          <div className=\"phonebook-input-fielsds\">\n            <label htmlFor={this.nameInputId} className=\"phonebook-label\">\n              <input\n                className=\"phonebook-input\"\n                type=\"text\"\n                name=\"name\"\n                //pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                value={name}\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                placeholder=\"name\"\n                onChange={this.handleChange}\n                required\n              />\n            </label>\n            <label className=\"phonebook-label\">\n              <input\n                className=\"phonebook-input\"\n                type=\"tel\"\n                name=\"number\"\n                value={number}\n                //pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n                placeholder=\"number\"\n                title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n                onChange={this.handleChange}\n                required\n              />\n            </label>\n          </div>\n          <div className=\"msg\">\n            <textarea\n              placeholder=\"more information\"\n              className=\"textarea\"\n              name=\"message\"\n              value={message}\n              onChange={this.handleChange}\n            ></textarea>\n            <button type=\"submit\" className=\"btn\">\n              Add contact\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.contactsArray(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: contact => dispatch(contactsOperations.addContact(contact)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.number,\n  message: PropTypes.string,\n  onSubmit: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { contactsSelectors } from '../../redux/phonebook';\nimport { changeFilter } from '../../redux/phonebook';\n\nconst Filter = ({ filter, changeFilter }) => {\n  return (\n    <div className=\"filter\">\n      <label>\n        <input\n          className=\"filter-input\"\n          type=\"text\"\n          value={filter}\n          placeholder=\"find contacts by name...\"\n          onChange={changeFilter}\n        />\n      </label>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  filter: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  changeFilter: e => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\nFilter.protoType = {\n  filter: PropTypes.string,\n  changeFilter: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport { Button } from '@material-ui/core';\n\n// function App() {\n//   return <Button color=\"primary\">Hello World</Button>;\n// }\n\nconst ContactList = ({ contacts, onDelete }) => {\n  return (\n    <>\n      <ul className=\"contact-list\">\n        {contacts.map(el => (\n          <li key={el.id} className=\"contact-item\">\n            {el.name + ':'}\n            <span className=\"contact-span\">{el.number}</span>\n            <p className=\"contact-message\">{el.message}</p>\n            <Button\n              onClick={() => onDelete(el.id)}\n              //color=\"primary\"\n              variant=\"contained\"\n              className=\"btn\"\n            >\n              Delete\n            </Button>\n            {/* <button onClick={() => onDelete(el.id)} className=\"btn\">\n              Delete\n            </button> */}\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default ContactList;\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape),\n  onDelete: PropTypes.func,\n};\n","import { connect } from 'react-redux';\nimport { contactsOperations } from '../../redux/phonebook';\nimport { contactsSelectors } from '../../redux/phonebook';\nimport ContactList from './ContactList';\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDelete: id => dispatch(contactsOperations.deleteContacts(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import ContactForm from '../components/ContactForm';\nimport Filter from '../components/Filter';\nimport ContactList from '../components/ContactList';\nimport { connect } from 'react-redux';\nimport { contactsOperations } from '../redux/phonebook';\nimport { Component } from 'react';\nimport { contactsSelectors } from '../redux/phonebook';\nimport { authSelectors } from '../redux/auth';\n\nclass PhonebookView extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    const { items } = this.props;\n    return (\n      <>\n        <ContactForm />\n        {items.length > 0 && (\n          <>\n            <h2>Contacts</h2>\n            <Filter />\n            <ContactList />\n          </>\n        )}\n      </>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  items: contactsSelectors.contactsArray(state),\n  //isAuthenticated: authSelectors.getIsAuthenticated(state),\n});\n\nconst mapDispatchToProps = {\n  fetchContacts: contactsOperations.fetchContacts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PhonebookView);\n"],"sourceRoot":""}